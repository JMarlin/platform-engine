.TH "GameNavigationState" 3 "22 Apr 2009" "Version v0.0.1 Pre-Alpha" "Platform 2D Game Engine" \" -*- nroff -*-
.ad l
.nh
.SH NAME
GameNavigationState \- The state in which game world navigation takes place.  

.PP
.SH SYNOPSIS
.br
.PP
\fC#include <GameNavigationState.h>\fP
.PP
Inherits \fBGameState\fP.
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBGameNavigationState\fP ()"
.br
.ti -1c
.RI "void \fBInit\fP ()"
.br
.ti -1c
.RI "void \fBCleanup\fP ()"
.br
.ti -1c
.RI "bool \fBHandleEvents\fP (\fBPlatformEngine\fP *game, SDL_Event &event)"
.br
.ti -1c
.RI "void \fBUpdate\fP (\fBPlatformEngine\fP *game)"
.br
.ti -1c
.RI "void \fBDraw\fP (\fBPlatformEngine\fP *game)"
.br
.ti -1c
.RI "bool \fBMovePlayer\fP (SDL_Rect &)"
.br
.ti -1c
.RI "virtual void \fBPause\fP ()"
.br
.ti -1c
.RI "virtual void \fBResume\fP ()"
.br
.ti -1c
.RI "void \fBChangeState\fP (\fBPlatformEngine\fP *game, \fBGameState\fP *state)"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "\fBGameMap\fP * \fBtheMap\fP"
.br
.ti -1c
.RI "bool \fBrunning\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
The state in which game world navigation takes place. 

While in this state, the game's operation revolves around the movement of a player sprite on some sort of visual map, or 'world'. It does this by making use of an entirely separate 'mapping' system, which controls the movement and rendering of the world map itself, while having player and event controls done internally. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "GameNavigationState::GameNavigationState ()"
.PP
.SH "Member Function Documentation"
.PP 
.SS "void GameState::ChangeState (\fBPlatformEngine\fP * game, \fBGameState\fP * state)\fC [inline, inherited]\fP"
.PP
.SS "void GameNavigationState::Cleanup ()\fC [virtual]\fP"
.PP
Does any last-minute operations before the termination of the navigation state. 
.PP
Implements \fBGameState\fP.
.SS "void GameNavigationState::Draw (\fBPlatformEngine\fP * game)\fC [virtual]\fP"
.PP
Draws the contents of the state, including the map and the player, to the engine's main screen.
.PP
\fBParameters:\fP
.RS 4
\fIgame\fP A pointer to the game engine 
.RE
.PP

.PP
Implements \fBGameState\fP.
.SS "bool GameNavigationState::HandleEvents (\fBPlatformEngine\fP * game, SDL_Event & event)\fC [virtual]\fP"
.PP
Handles event triggers for this state, including the movement of the player within the map.
.PP
\fBParameters:\fP
.RS 4
\fIgame\fP A pointer to the game engine 
.br
\fIevent\fP Reference to the last polled SDL_Event 
.RE
.PP

.PP
Implements \fBGameState\fP.
.SS "void GameNavigationState::Init ()\fC [virtual]\fP"
.PP
Configures assets specific to this state; particularly assets involved with map construction. 
.PP
Implements \fBGameState\fP.
.SS "bool GameNavigationState::MovePlayer (SDL_Rect &)"
.PP
Gives the impression of the player moving in some direction on the map by moving everything else in the opposite direction, and possibly triggering a movement animation for the player's image. Fails if there is a collision between the player and a map object.
.PP
\fBReturns:\fP
.RS 4
True if the movement succeeds, false if there is collision 
.RE
.PP

.SS "void GameState::Pause ()\fC [virtual, inherited]\fP"
.PP
Pauses the execution of this state until further notice, assuming it is currently running. If it is already paused, this has no effect. 
.SS "void GameState::Resume ()\fC [virtual, inherited]\fP"
.PP
Resumes the execution of this state, if it has been paused previously; otherwise it has no effect. 
.SS "void GameNavigationState::Update (\fBPlatformEngine\fP * game)\fC [virtual]\fP"
.PP
Does any necessary logic updates to bring the game's data up to date with the actions of the player or anything else in the game.
.PP
\fBParameters:\fP
.RS 4
\fIgame\fP A pointer to the game engine 
.RE
.PP

.PP
Implements \fBGameState\fP.
.SH "Member Data Documentation"
.PP 
.SS "bool \fBGameState::running\fP\fC [protected, inherited]\fP"
.PP
.SS "\fBGameMap\fP* \fBGameNavigationState::theMap\fP\fC [protected]\fP"
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for Platform 2D Game Engine from the source code.
