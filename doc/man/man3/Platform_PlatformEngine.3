.TH "Platform::PlatformEngine" 3 "4 May 2009" "Version v0.0.1 Pre-Alpha" "Platform 2D Game Engine" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Platform::PlatformEngine \- The game engine instance.  

.PP
.SH SYNOPSIS
.br
.PP
\fC#include <platform-engine.h>\fP
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBPlatformEngine\fP ()"
.br
.ti -1c
.RI "void \fBInit\fP ()"
.br
.ti -1c
.RI "void \fBCleanup\fP ()"
.br
.ti -1c
.RI "void \fBStartState\fP ()"
.br
.ti -1c
.RI "void \fBChangeState\fP (\fBGameState\fP *state)"
.br
.ti -1c
.RI "void \fBPushState\fP (\fBGameState\fP *state, char *scriptPath=NULL)"
.br
.ti -1c
.RI "void \fBPopState\fP ()"
.br
.ti -1c
.RI "void \fBHandleEvents\fP ()"
.br
.ti -1c
.RI "void \fBUpdate\fP ()"
.br
.ti -1c
.RI "void \fBDraw\fP ()"
.br
.ti -1c
.RI "bool \fBRunning\fP ()"
.br
.ti -1c
.RI "void \fBQuit\fP ()"
.br
.in -1c
.SH "Detailed Description"
.PP 
The game engine instance. 

This class represents the game engine. It encompasses the major subprocesses; Initialization, State control, Event Handling, Updating, and Drawing. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "Platform::PlatformEngine::PlatformEngine ()"
.PP
.SH "Member Function Documentation"
.PP 
.SS "void Platform::PlatformEngine::ChangeState (\fBGameState\fP * state)"
.PP
The engine state is explicitly changed by calling this function with a new state that you wish to be the executed state. It actually passess both the new state and a reference to the engine to the current top state's equivalent function, allowing for customized transitions. 
.SS "void Platform::PlatformEngine::Cleanup ()"
.PP
This function cleans up any of the remaining global assets of the engine. This mostly consists of open surfaces and states remaining on the stack. 
.SS "void Platform::PlatformEngine::Draw ()"
.PP
This function's main purpose is to call the drawing function of the current state. 
.SS "void Platform::PlatformEngine::HandleEvents ()"
.PP
This function's main purpose is to call the event handling function of the current state. 
.SS "void Platform::PlatformEngine::Init ()"
.PP
The Init function sets up the game assets; aside from just initializing the SDL subsystems, it also loads any configuration scripts. 
.PP
The script file, 'init.lua', is loaded as a state by this function.
.PP
The variables related to identifying the program revision are then loaded from the config file. 'title' refers to the actual name of the program; by default this says something like 'Platform Test', but in a game release this should contain the name of the game itself. 'version' is the major revision, and normally should only be incremented in a major rewrite, or when going from pre-release to release. 'release' refers to an upgrade release, involving new features or enhancements. 'subrelease' refers to small changes, and should probably only be used for bugfixes. 'status' is an appended title, and it can either be used for codenames, or to indicate development status; for example, 'Beta', 'Release Candidate' or 'Final'.
.PP
The SDL subsystems are then initialized. The \fBPlatform\fP engine uses the video and timer subsystems.
.PP
The window of the main screen should contain all of the previously entered release identification information.
.PP
Next, the global variables for display configuration are parsed. 'screenWidth' and 'screenHeight' represent the horizontal and vertical dimensions of the display screen. 'screenBits' represents the bit depth of the screen.
.PP
The next set of variables represent SDL flags that specify the way the screen display will operate. These include, for example, 'useHardwareMemory' and 'useDoubleBuffering.' Most of these are self-explanatory. If you do not understand the meaning of these flags, it is probably safest to leave them at the default settings.
.PP
After being parsed, the flags are then used in the generation of the display screen.
.PP
Once the screen has been created, an engine flag indicating that the engine is ready to run is set to 'true', the lua script state is closed, and the program can now begin its primary loop of operation.
.SS "void Platform::PlatformEngine::PopState ()"
.PP
This function pops a state pointer off the top of the stack. It's operation is ordered such that the state first becomes inactive and then is deleted from memory, effectively preventing segmentation errors. 
.SS "void Platform::PlatformEngine::PushState (\fBGameState\fP * state, char * scriptPath = \fCNULL\fP)"
.PP
This function takes a reference to a state and then pushes it onto the top of the engine's state stack. That then becomes the active stack for the engine.
.PP
\fBParameters:\fP
.RS 4
\fIstate\fP Pointer to the newly-created state being pushed 
.br
\fIscriptPath\fP The path to the state's configuration script 
.RE
.PP

.SS "void Platform::PlatformEngine::Quit ()\fC [inline]\fP"
.PP
.SS "bool Platform::PlatformEngine::Running ()\fC [inline]\fP"
.PP
.SS "void Platform::PlatformEngine::StartState ()"
.PP
This function uses a prewritten lua script to initiate a state. This is intended to be the first state that is run by the engine. 
.PP
First, the state is loaded from the hard-coded preset path of the 'beginstate.lua' script. This path is './scripts/beginstate.lua'.
.PP
The engine then retrieves the type of state from the script and creates that state.
.PP
After creation, the state is pushed onto the engine's state stack, and then it is initiated.
.SS "void Platform::PlatformEngine::Update ()"
.PP
This function's main purpose is to call the update function of the current state. 

.SH "Author"
.PP 
Generated automatically by Doxygen for Platform 2D Game Engine from the source code.
